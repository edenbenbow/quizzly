{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/question-form/question-form.component.ts","webpack:///src/app/question-form/question-form.component.html","webpack:///src/app/questions.service.ts","webpack:///src/app/questions/questions.component.ts","webpack:///src/app/questions/questions.component.html","webpack:///src/app/quiz.model.ts","webpack:///src/app/results/results.component.ts","webpack:///src/app/results/results.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","template","appRoutes","path","component","redirectTo","pathMatch","AppModule","forRoot","declarations","imports","providers","bootstrap","QuestionFormComponent","onChoiceMade","onChange","emit","form","value","choice","valueChanges","subscribe","templateUrl","styleUrls","QuestionsService","http","get","pipe","result","map","r","label","name","fileName","choices","providedIn","QuestionsComponent","route","questionsService","showResults","getQuestions","snapshot","params","quizId","questions","answers","currentQuestionIndex","values","length","quiz","undefined","Choice","correct","Question","Quiz","Answers","ResultsComponent","WelcomeComponent","getQuizzes","environment","production","bootstrapModule","catch","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>'\n})\n\nexport class AppComponent {}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { QuestionFormComponent } from './question-form/question-form.component';\nimport { ResultsComponent } from './results/results.component';\nimport { QuestionsComponent } from './questions/questions.component';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatCardModule} from '@angular/material/card';\n\nconst appRoutes: Routes = [\n  { path: 'welcome', component: WelcomeComponent },\n  { path: ':quizId', component: QuestionsComponent },\n  { path: '', redirectTo: 'welcome', pathMatch: 'prefix' },\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionFormComponent,\n    ResultsComponent,\n    QuestionsComponent,\n    WelcomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    BrowserAnimationsModule,\n    MatCardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Question } from '../quiz.model';\n\n@Component({\n  selector: 'app-question-form',\n  templateUrl: './question-form.component.html',\n  styleUrls: ['./question-form.component.scss']\n})\nexport class QuestionFormComponent implements OnInit {\n\n  @Input() question: Question;\n  @Output() onChoiceMade = new EventEmitter<string>();\n\n  public form: FormGroup;\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      choice: new FormControl()\n    });\n\n    this.form.valueChanges.subscribe(this.onChange);\n  }\n\n  onChange = () => {\n    this.onChoiceMade.emit(this.form.value.choice);\n  }\n}","<div class=\"quiz\" *ngIf=\"question\">\n  <h2>{{question.label}}</h2>\n  <form [formGroup]=\"form\">\n    <div class=\"form-group\">\n      <label *ngFor=\"let choice of question.choices\">\n        <input type=\"radio\" [value]=\"choice\" formControlName=\"choice\">\n        <span>{{choice.value}}</span><br>\n      </label>\n    </div>\n  </form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Quiz, Question } from './quiz.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionsService {\n  constructor(private http: HttpClient) { }\n\n  public getQuizzes() {\n    return this.http.get(`./assets/quiz-list.json`).pipe(\n      map((result: any[]) => {\n        return result.map(r => new Quiz(r.label, r.name, r.fileName));\n      })\n    );\n  }\n\n  public getQuestions(fileName: string) {\n    return this.http.get(`./assets/${fileName}.json`).pipe(\n      map((result: any[]) => {\n        return result.map(r => new Question(r.label, r.choices));\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { switchMap } from 'rxjs/operators';\n\nimport { QuestionsService } from '../questions.service';\nimport { Quiz, Answers, Choice, Question } from '../quiz.model';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n\n  public quiz: Quiz;\n  public answers: Answers;\n  public questions: Question[];\n  public currentQuestionIndex: number;\n\n  public showResults = false;\n\n  // inject both the active route and the questions service\n  constructor(private route: ActivatedRoute, public questionsService: QuestionsService) {}\n\n  ngOnInit() {\n\n    // read from the dynamic route and load the proper quiz data\n    this.questionsService.getQuestions(this.route.snapshot.params.quizId)\n      .subscribe(questions => {\n        // initialize everything\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n\n}\n","<div *ngIf=\"quiz && !questions\" class=\"spinner-grow text-primary\"></div>\n\n<mat-card *ngIf=\"questions\">\n\n<div class=\"quiz\" *ngIf=\"questions\">\n\n  <div class=\"question\" *ngIf=\"!showResults\">\n    <app-question-form\n      [question]=\"questions[currentQuestionIndex]\"\n      (onChoiceMade)=\"updateChoice($event)\">\n    </app-question-form>\n    <mat-card-actions>\n    <button mat-button\n      class=\"next-button\"\n      (click)=\"nextOrViewResults()\"\n      [disabled]=\"!answers.values[currentQuestionIndex]\"\n    >{{currentQuestionIndex === questions.length - 1 ? 'View results' : 'Next'}}</button>\n\n  </mat-card-actions>\n  </div>\n\n</div>\n\n  <app-results *ngIf=\"showResults\" [answers]=\"answers\"></app-results>\n\n</mat-card>\n","export class Choice {\n  constructor(public value: string, public correct?: boolean) {}\n}\n\nexport class Question {\n  constructor(public label: string, public choices: Choice[]) {}\n}\n\nexport class Quiz {\n  constructor(public label: string, public name: string, public fileName: string) {}\n}\n\nexport class Answers {\n  constructor(public values: Choice[] = []) {}\n}\n","import { Component, Input } from '@angular/core';\nimport { Answers } from '../quiz.model';\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.scss']\n})\nexport class ResultsComponent {\n  @Input() answers: Answers;\n}\n","  <mat-card-title class=\"title\">Results:</mat-card-title>\n  <mat-card-content class=\"answer mat-app-background\" *ngFor=\"let a of answers.values\" [ngClass]=\"{correct: a.correct}\">\n    <h2>{{a.value}}</h2>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button color=\"primary\" class=\"btn btn-primary\">\n      <a routerLink=\"/welcome\" class=\"next-button\">Choose another quiz</a>\n    </button>\n  </mat-card-actions>\n","import { Component, OnInit } from '@angular/core';\nimport { QuestionsService } from '../questions.service';\nimport { Quiz } from '../quiz.model';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.scss']\n})\nexport class WelcomeComponent implements OnInit {\n  quiz: Quiz[];\n  constructor(public questionsService: QuestionsService) { }\n\n  ngOnInit() {\n    this.questionsService.getQuizzes()\n      .subscribe(quiz => {\n        this.quiz = quiz;\n      });\n  }\n  reset() {\n    this.quiz = undefined;\n  }\n}\n","<div>\n\n  <h1>Are you a quizmaster?</h1>\n  <h3>Put your knowledge\n    to the test.</h3>\n\n  <div *ngFor=\"let q of quiz\" class=\"quiz-card\">\n    <a routerLink=\"/{{q.name}}\"><img src='././assets/{{q.name}}.jpg'></a>\n    <h2>{{q.label}}</h2>\n    <button class=\"next-button\" a routerLink=\"/{{q.name}}\" class=\"btn btn-primary\">Take quiz</button>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}